will be using racket for this
not really understanding racket
but its "language oriented"

you can do

#lang sicp

and i guess its the same dialect of lisp in sicp (scheme)

3/20/2024

OK so how will i do this?
> book

> the lecture from 1986
https://www.youtube.com/watch?v=-J_xL4IGhJA&list=PLE18841CABEA24090

> there is leon byford
https://www.youtube.com/watch?v=FIUJd_ZFmGo&list=PL7BcsI5ueSNFPCEisbaoQ0kXIDX9rR5FF

> code_report
https://www.youtube.com/watch?v=oA-FdE3KV88&list=PLVFrD1dmDdvdvWFK8brOVNL7bKHpE-9w0

i will, read book, then watch the 1986 thing
after finishing chapter, watch code_report video

-- Chapter --
* Subchapter

-- Unofficial Texinfo Format --

i live in era very fortunate where pdf's
are very convinient,

-- Dedication --

"spirit that lives in the computer"
xD

keep fun in computing

"Bible salesmen. The world has too many of those already."
xD
- Alan J Perlis

-- Foward --

what is programming
what is computer programming

three foci in book
human mind, computer programs and computres

a whole lot of yapping

standard programs known to be correct, call them idioms
and combine them into larger structures

each breakthrough in hardware technology leads to
more massive programming enterprises, new orginizational
principles, and enrichment of abstract models

a programmer should acquire good algorithms and idioms

im very curiuos on how lisp was used for ai development
i remember reading somehting on this in
land of lisp book, did not like the book btw

scheme differs from original lisp

static scoping for variable bindings
permitting functions to yield functions as values
 -> functions as first class citizens?

Algol 60 lives on in the genes of Scheme and Pascal

why is lisp so great?

"Jhon McCarthy, Early History of Lisp
 One can even conjecture that Lisp owes its
 survival specifically to the fact that its
 programs are lists, which everyone, including me,
 has regarded as a disadvantage."

because the main datastructure are list,
lisp programms is just a list,

"It is better to have 100 functions operate on one
 datastructure than to have 10 functions operate on
 10 datastructures" - alan j perlis
i forgot were i heard this before

"note this is a text about programming, unlike most lisp books"
what were those like at the time?

parsing lisp is easy

-- Preface to the Second Edition --

emphasize on new themes
different approaches to dealing with time in computational models
objects with state
concurrent programming
functional programming
lazy evaluation
nondeterministic programming

"talmudic pun"
xD

iee 1990 (scheme standard)

all very interesting stuff
logic programming
register-machine sumulator implementatino
compiler

supplements
http://mitpress.mit.edu/sicp

-- Preface to the First Edition --

an entry-level subject in computer science at MIT
required for electrical engineering and comp science

* what is computer language
* techniques used to control the intellectual complexity of large software systems.

"Programas must be written for people to read, and only
 incidentally for machines to execute"

"our goal is that students who complete this subject should
 have a good feel for the elements of style and the aesthetics
 of programming"

common to all of engineering design

control complexity by building abstractions that hide
details when appropriate.

computacion provides the notion of 'how to"
algol we take lexical scoping, block structure

alonzo church and haskell curry are different people

-- Achnowledgments --
mit 6.231

Macsyma system
sybolic computation

blah blha blha

support from DARPA

-- Building Abstractions with Procedures --

i guess they call functions procedures

the idea of computational process

"conjure the spirits ... with our spells"
xD

talks about software

* Programming in Lisp

why lisp

recursion equations
McCarthy - Recursive Functions of Symbolic Expressions and Their Computation by Machine

first lisp interpreter implemented by McCarthy
with the help of colleagues + students
in AI group in research laboratory MIT

'The Lisp 1 Programmer's Manual'

LISt Processing
was designed to provide symbol-manipulating
capabilities for attacking programming problems
such as
symbolic differentiation and integration of algebraic expression

atoms and list

not designed by a concerted effort
evolved inforammly by users

no officiall definition of lang

all kinds of lisp dialects

scheme IEEE standard vs Common Lisp ANSI standard

lisp used in, integration of the motion of the solar system

lisp used where efficiency is not the central concern

"passive" data
"active" processes

"Lisp flexibility in handling procedures as data"

i think this is talking about using passing in functions
into other functions

lisp was the first to have first class functions right?

* The Elements of Programming

powerfull lang is more than just instructions from computer
every power lang has this three mechanism
 > primitive expressions
 > means of combination
 > means of abstraction

in programming we deal with 2 kinds of elements
 > procedures
 > data
"later we discover that they are really not so distinct"

any power lang be able to
 > describe primitive data
 > describe procedures
 > combine and abstracting procedures and data

pg 6, 7
"characterization of number as "simple data
 is a barefaced bluff. The treatment of numbers
 is one of the trickiest and most confusing aspects
 of any programming language...."
very interesting footnote
pg 6, 7

* Expressions

expression is evaluated, and returns value ?

(- 1000 334)
> 666
xD

always so interesting how lisp handles
fractions

(* (/ 1 2) (/3 4))
> 3/8

combinations, delimiting a list of expressions within parentheses

leftmost element in list is operator
other elements are operands

prefix notation
how does the "parser" work in that
you can have "infinite" amound of operands
(+ 1 2 3 4 5 .. 10)
how is infix notation programmed vs prefix notation
programmed?


when its very long, it become a little
unweildly to read

lisp was also first to have REPL right?

_7 every expresion has a value

* Naming and the Enviorment

i can load vim thrue terminal just like in R
(system "vim file.rkt")

it does not quite work bc im using
#lang sicp

i will just (display .)

interesting it writes "associates"
and not assign
are they constant?

"define in our language is simply a means of abstraction"

lisp program usually consist of
a large number of relatively simple
procedures

"associating values with symbols and
 later retrieving them means that the
 interpreter must maintain some sort of
 memory that keeps track of the
 name-object pairs."

so interesting they call it
name-object pairs

this memory is called "enviorment"
more precise "global enviorment"

different enviorments footnote

* Evaluating Combinations

terminal nodes, nodes with no branches stemming from them

percolate upward

"recursion is very powerful when dealing with
 hierarchical, treelike object"

"tree accumulation"

(+) is part of the global enviorment
and are associated with the sequences of machine instructions
that are their "values"

(define x 3) is not a combination
such exceptions to evaluation rule is called
special forms
the various kinds of expressions and their evaluation
rule constitute the syntax of a programing language

the term syntactic sugar was coined by Peter Landin

lispers not concerned with matters of syntax

* Compound Procedures

procedure definitions
powerful abstraction technique
a compound operation can be given a name
and then referred to as a unit.

(define (<name> <params>) (<body>))

footnote> its possible, indeed important
 to be able to seperate these two notions,
 create procedures without naming them
anonymous functions?
lambda functions?
 and to give names to procedures that have already
 been created

combines procedures to make other procedures

in lisp they use kebab case

* The Substitution Model for Procedure Application

the name so so acadamic (hard)
but its so simple

chapter 4 we will see how a interpreter is implemented?

evaluation process

* Applicative order versus normal order

_15 interesting footnote

it looks like a tree

"fully expand and then reduce" evaluation method
> normal-order evaluation
vs
"evaluate the arguemtns and then apply"
> applicative-order
what the interpreter actually uses
lazy evalutaion ?
deos not calculate value until it needed
very last moment

cases where they do not produce the same value

scheme uses applicative order evalutation

very interesting

* Conditional Expressions and Predicates

case analysis
(cond
    ( (p) (e) )
    ( (p) (e) )
    ( (p) (e) ))
wildcard?

unsightly
read some stackoverflow comment
lisp is write once, and never read again

clauses

<Predicate> true or false
<e> expression

wont evaluate expression if predicate is false
if all false, then value of cond is undefined

#t
#f

(cond) (<p> <e>) (else)
(if <p> (#t <e>) (#f <e>))

(cond)
sequence of expressions > so ugly
final expression is returned

if is a special form
must be single expression

it will only evaluate the consequent
or alternative but not both

if it were a regular function
it would evaluate both?

primatives predicates
logical operators

(and)
(or)
(not)

i thought scheme came with (>=) already defined
(>= x y) (or (> x y) (= x y)
this is so much cleaner
(>= x y) (not (< x y))

boolean algebra
exercises

the 1.4 exercise is very interesting
(define (exe1.4 a b)
  ((if (> b 0) + -) a b))
ythe operator + or - is being
"returned" so kool

exercise 1.5
this is an infinite recursive function
(define (p) (p))

in haskell this works btw

p = p
test x y = if x == 0 then
                "0" else
                y

main = putStrLn (test 1 p)
-> "0"
p is never evaluated

you can have lazy evaluation in racket by
#lang lazy

can you implement a lazy intepreter by
having everything was '(symbols)
then use (eval) when needed?

what happened to exercise 1.1.6

* Example Square Roots by Newton's Method
probably saw this in class metedo numericos

interesting that he wont describe procedures
as functions like in every other language because
when they talk about the matethical functions
its a definition and not a recipe

declarative knowledge
imperative knowledge

declarative (what is) descriptions
imperative (how to) descriptions

at the time declarative languages or style
was a very new thing ?

Newton's method

guess y
square root of a number x

by averaging x/y

sqrt of 2

guess  quotient           average
1      (2/1) = 2          ((2 + 1) /2) = 1.5
1.5    (2/1.5) = 1.3333   ((1.333 + 1.555) /2) = 1.4167
1.4167 (...

in lisp you can use functions before they are defined
in source file

predicates are boolean thing

programming language that enforces the
ending with ? thing

i remember doing something similar to
(define (sqrt x)
     (sqrt-iter 1.0 x))
sort of like wrapper functions

also this is the first recursive function

it so surprising to terse the code
is, what would the equivalent be in
any other language?

does scheme utilize tail recursion
recursion without needing to push
another block to the stack

again (if) is not a procedure but
a special form, but why cant it be
a procedure?

also, if you wanted to create a new if
in a language like C, you could not right?

int new-if(bool predicate, int then, int else) ?

exercise 1.1.6
ran the code and it seemed to never terminate
i dont know why but suspected it must be because
procedures use eager evaluation, if it ran
lazy then it would terminate. i was correct

but i dont understand why wont it terminate
I KNOW WHY NOW

(new-if (good-enough? guess x)
    guess
    (sqrt-iter (improve guess x) x))

i thought well, nothing else changed the (good-enough? guess x)
must reach the same point were it be true and program will terminate
but it cant terminate, it has to evaluate
(sqrt-iter (improve guess x) x)) even if it is good-enough?
meaning it will be stuck in an infinet loop

now i kinda dont understand why it does terminate with lazy
evaluation

how do standard libraries do sqrt()
are there assebmly instructions for sqrt()
?

kinda feel like skipping
exer 1.8
dont get why it wont terminate
idk what is going wrong

* Procedures as Black-Box Abstractions

heard of this term before (Black Box) ing
i guess is, there is some complicated
procedure that we dont understand how it works
but we know how to use it to get what we want

i wonder how recursion looks like
at the lower levels

decompisition strategy

each procedure accomplishes an
identifiable task that can be used
as a module

creating abstractions

i thinking of using a blackbox
crypto-lib for an cli appliaction
that encrypts files and decrypts them
with symmetric encription, for storing
files in a public space, prob not safe
but whatever, better than not encrypted

its interesting that they explain this
now, and not when they explained
defining procedures

what do logicians do?

A formal parameter of a procedure has a very special role in the
procedure definition, in that it doesn’t maer what name the formal
parameter has. Such a name is called a bound variable, and we say that
the procedure definition binds its formal parameters

the language in the book, you
have to pay attention to what its saying
to understand the words on the page

you have to chew it, alot

name binding

bound variable vs free variable

free var (sustitucion)
not local variables or parameters of
function

broooooooo
The set of expressions for which a binding defines a name
is called the scope of that name. In a procedure definition, the bound
variables declared as the formal parameters of the procedure have the
body of the procedure as their scope.

it uses so many words to explain something
that could be explained in much less

the issue of name space
avoiding name collisions strategys

you define "private procedures"
inside of other procedures so that
the only procedure available to users
is the one you intend

is it because im not used to it but
i feel like reading "C like" programming languages
are easier to read than lisp

block structure
simplest solution to the
name-packaging problem

idk if i like not explictly passing in x
into the function, i guess it would of made
sense because we only passed it in out of
necesity, now that it is all "lexicaly scoped"
not necesary anymore,
i guess now you cant accidently pass in a different
number from intended.

maybe you dont like if because look at
the square procedure, when you think
i want a procedure that returns the square of a number
you define it like this
(define (square x) (* x x))
its a standalone thing, that makes sense in any env
but
(define (square) (* x x))

 lexical scoping
how does this work, reminds me in rust
you could define variables in blocks and they only
exist in this block
fn main(){
    // random as block
    let x = 15;
    {
        let x = 10;
        println!(x);
    }
}
how does this lexical scoping work?
im imagining a tree, and a function only exists
if its defined below the node?

block structures originated with Algol 60
what was programming like without it?

* Procedures and the Processes They Generate

the elements of programming

primative arithmetic operations
combined primative operations to make procedures

not enough to say we know how to code
we only know how the pieces in a chess board move
not how to win, tactics strategy openings etc

the consequences of executing a procedure

"local evolution of a computational process"
"patterns of process evolution"
"shapes"

* Linear Recursion and Iteration

the classic recursion example of factorial
remember when learning to use recursive functions
in haskell there was
- goal state (when to exit)
- how to reach the goal state (take step twoards goal)

linear recursion process
n * factorial(n-1)
n * n-1 * n-2 * n-3

i would have not used that code to make
the "linear iterative" process for factorial
just substract n-1, and store n* n-1 in a bucket

they used (if (> x y )
cleaner dont have to multiply the collection at the end

this is tail call optimization
both take the same amount of steps so
one should not be faster than the other?

recursive process
carrying out this process requires that the interpreter
keep track of the operations to be performed later on.

did book explain what an interpreter is?
the index is neat

the call it iterative process
they will prob mention TCO later

state variables,
just noticed they havent mutated the value of a
variable yet

in classic factorial example
there is additional information
outside of the function when its
pushed into stack
stack n  stack n+1
     n * fact(n-1)

but in linear iterative
all the information needed is in
the function

if you stop computation, you dont
need all the context, only need
the arguments that were last used

hidden information maintained by the interpreter

interesting he does not mention
the stack hree.

dont confuese
recursive process
recursive procedure
pg 45

are these not interchangeable?

so the interpreter really does
make use of TCO

this is so interesting
when they talk about iterative process

when i hear iterative, i think
loops, do while's
repeat

"resorting to special-purpose 'looping
 constructs'"
 woww lool resorting to HAHAHAH

 is that why the use loops
 (c like/procedurual langs), because

 they dont utilize tco?
 "scheme doest not share this defect"
 lol

"it will execute an iterative process
  in constant space"
"even if it is described by a recursive
 procedure"

 tail recursion mentioned
 compiler optimization trick
 footnote_
 "message-passing" model, i thught that was the true OOP model

 scheme standard says interpreter must be tail recursive

loops are just syntactic sugar

exercise 1.9
first is recursive,
doing n * f(n-1) but with inc
(inc (+ (dec a) b), what is confusing is seeing +, you can just redifine + lol
second is iterative, very easy to see just by looking

1.10 Ackermann function
also in the haskell book right?
yeah they always reach 1
tree recursion exercise before thing

the haskell version so much more cooler with
the whole patern matching thing

dont feel like doing all that, so tiresome

* Tree Recursion
very interesting, its like
a tree where every tree end is +1

is there ever a need for tree recursion?

"One should not conclude from this that
 tree-recrusive processes are useless. When
 we consider processes that operate on hierachically
 structured data rather than numbers, ... tree recursion
 is a natural and powerfull tool"
the interpreter itsself evaluates expressions using tree recursive process

"To formulate the iterative algorithm required noticing
 that the computation could be recast as an iteration with the
 three state variables"

* Example: Counting Change

How many different ways can we make change for
$1.00, given
half-dollars
quarters
dimes
nickels and pennies

i think using recursion here would work right?
start with the highest ammount
and create a sepperate branch for the next coin until reach
1.00 ?

wouldn't it be backwards?
start with the lowest denomination
and create a different branch
for the next coin
but what about only using quarters
or only using pennies?

"The number of ways to change amount a
using n kinds of coins equals"

"The total number of ways to make
 change for some amount is equal to
 the number of ways to make change for
 the amount without using any of the
 first kind of coin"

 speak in english please

lisp is difficult to read when
its written like this

is the book talking about
dynamic programming?

don't get this at all

this footnote _34 is explaining
dynamic programming right?
"construct a table of values as they
 are computed, each time we are asked
 to apply the procedure we first look
 if the value is already in the table..."
this strategy is known as
tabulation or memoization

exer 1.11 is trivial
but exer 1.12 seems really difficult
pascals triangle
footnote mentions the book "The Art of Computer Programming"

kind of been lost this entire subchapter,
will have to comeback to this.

- 1.2.3 Orders of Growth -

explaning big-O notation?
yup

just skiping these exercises
sorry
pg 57
is the video lectures easier?


2024/08/06

I believe i got very discouraged after the whole coin example that i felt dumb and quit.
But you should not feel discouraged, it just means you have more to learn.
Will watch the mit series. looks like fun
